{
  "name": "node-flat-db",
  "version": "0.2.1",
  "description": "JSON database for Node and the browser powered by lodash",
  "keywords": [
    "flat",
    "file",
    "local",
    "database",
    "JSON",
    "lo-dash",
    "lodash",
    "underscore",
    "localStorage",
    "embed",
    "embeddable",
    "extendable"
  ],
  "main": ".",
  "scripts": {
    "benchmark": "node benchmark/write.js;node benchmark/update.js; node benchmark/delete.js;",
    "test": "babel-node test/all | tap-spec",
    "prepublish": "npm run build",
    "precommit": "npm test",
    "build": "cp src/** . && npm run umd && npm run min",
    "umd": "webpack src/dist.js dist/node-flat-db.js --output-library node-flat-db",
    "min": "webpack -p src/dist.js dist/node-flat-db.min.js --output-library node-flat-db"
  },
  "repository": {
    "user": "gabrielcsapo",
    "repo": "node-flat-db",
    "host": "github.com",
    "branch": "master",
    "apiHost": "api.github.com",
    "tarball_url": "https://api.github.com/repos/gabrielcsapo/node-flat-db/tarball/master",
    "clone_url": "https://github.com/gabrielcsapo/node-flat-db",
    "https_url": "https://github.com/gabrielcsapo/node-flat-db",
    "travis_url": "https://travis-ci.org/gabrielcsapo/node-flat-db",
    "zip_url": "https://github.com/gabrielcsapo/node-flat-db/archive/master.zip",
    "api_url": "https://api.github.com/repos/gabrielcsapo/node-flat-db"
  },
  "author": {
    "name": "Gabriel J. Csapo",
    "email": "gabecsapo@gmail.com"
  },
  "license": "MIT",
  "homepage": "https://github.com/gabrielcsapo/node-flat-db",
  "dependencies": {
    "graceful-fs": "^4.1.3",
    "is-promise": "^2.1.0",
    "json-parse-helpfulerror": "^1.0.3",
    "lodash": "^4.0.0",
    "lz-string": "^1.4.4",
    "steno": "^0.4.1"
  },
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-eslint": "^6.0.4",
    "babel-loader": "^6.2.2",
    "babel-preset-es2015": "^6.1.18",
    "babel-preset-stage-3": "^6.3.13",
    "filesize": "^3.3.0",
    "husky": "^0.11.0",
    "sinon": "^1.17.2",
    "standard": "^7.1.2",
    "tap-spec": "^4.1.1",
    "tape": "^4.2.2",
    "tempfile": "^1.1.1",
    "underscore-db": "^0.10.0",
    "webpack": "^1.12.13"
  },
  "engines": {
    "node": ">= 0.12"
  },
  "standard": {
    "parser": "babel-eslint"
  },
  "gitHead": "37db16225245846066f5028003336ad40265c44d",
  "_npmVersion": "3.9.5",
  "_nodeVersion": "4.2.1",
  "dist": {
    "shasum": "d94681bc512f03e0a49bb75270c52992a3b2ba34",
    "tarball": "http://registry.npmjs.org/node-flat-db/-/node-flat-db-0.2.1.tgz"
  },
  "versions": [
    {
      "number": "0.0.0",
      "date": "2016-06-14T06:53:42.299Z"
    },
    {
      "number": "0.1.0",
      "date": "2016-06-15T01:49:10.496Z"
    },
    {
      "number": "0.2.0",
      "date": "2016-06-16T02:30:36.510Z"
    },
    {
      "number": "0.2.1",
      "date": "2016-06-16T04:33:16.577Z"
    }
  ],
  "created": "2016-06-14T06:53:42.299Z",
  "modified": "2016-06-16T04:33:16.577Z",
  "lastPublisher": {
    "name": "gabrielcsapo",
    "email": "gabecsapo@gmail.com"
  },
  "owners": [
    {
      "name": "gabrielcsapo",
      "email": "gabecsapo@gmail.com"
    }
  ],
  "readme": "# node-flat-db\n\n[![Build Status](https://travis-ci.org/gabrielcsapo/node-flat-db.svg?branch=master)](https://travis-ci.org/gabrielcsapo/node-flat-db)\n[![Npm Version](https://img.shields.io/npm/v/node-flat-db.svg)](https://www.npmjs.com/package/node-flat-db)\n[![Dependency Status](https://david-dm.org/gabrielcsapo/node-flat-db.svg)](https://david-dm.org/gabrielcsapo/node-flat-db)\n[![devDependency Status](https://david-dm.org/gabrielcsapo/node-flat-db/dev-status.svg)](https://david-dm.org/gabrielcsapo/node-flat-db#info=devDependencies)\n[![npm](https://img.shields.io/npm/dt/node-flat-db.svg)]()\n[![npm](https://img.shields.io/npm/dm/node-flat-db.svg)]()\n\n> This is a fork of [lowdb](https://github.com/typicode/lowdb) before they broke the api and no longer is as stable as before (fork of 12.5 lowdb)\n\n> Need a quick way to get a local database for a CLI, an Electron app, a small server or the browser?\n\n## Example\n\n```js\nconst flat = require('node-flat-db')\nconst storage = require('node-flat-db/file-sync')\n\nconst db = flat('db.json', { storage })\n\ndb('posts').push({ title: 'node-flat-db is awesome'})\n```\n\nDatabase is __automatically__ saved to `db.json`.\n\n```js\n{\n  \"posts\": [\n    { \"title\": \"node-flat-db is awesome\" }\n  ]\n}\n```\n\nYou can query and manipulate it using __any__ [lodash](https://lodash.com/docs) __method__.\n\n```js\ndb('posts').find({ title: 'node-flat-db is awesome' })\n```\n\nAnd access underlying database object any time.\n\n```js\ndb.object.posts\n```\n\n__[Click here to try node-flat-db in the browser.](http://typicode.github.io/node-flat-db/)__\n\n## ES2015\n\nExamples use ES2015 syntax for convenience, but you can use ES5 syntax too. For example:\n\n```js\nvar db = flat('db.json', { storage: storage })\n```\n\nPlease note also that node-flat-db can only be run in one instance of Node, it doesn't support Cluster.\n\n## Installation\n\nUsing npm:\n\n```bash\nnpm install node-flat-db --save\n```\n\nA standalone UMD build is also available on [unpkg](https://unpkg.com/):\n\n```html\n<script src=\"http://unpkg.com/node-flat-db@^0.2.0/dist/node-flat-db.min.js\"></script>\n<script>\n  var db = flat() // in-memory\n  var db = flat('db', { storage: flat.localStorage }) // localStorage\n</script>\n```\n\n## Features\n\n* Very small (~100 lines for core)\n* lodash API\n* Extendable:\n  * __Custom storage__ (file, browser, in-memory, ...)\n  * __Custom format__ (JSON, BSON, YAML, ...)\n  * __Mixins__ (id support, ...)\n  * __Encryption__\n\nnode-flat-db is also very easy to learn since it has __only a few methods and properties__.\n\n_node-flat-db powers [json-server](https://github.com/typicode/json-server) package, [jsonplaceholder](http://jsonplaceholder.typicode.com/) website and [many other great projects](https://www.npmjs.com/browse/depended/node-flat-db)._\n\n## Usage examples\n\nDepending on the context, you can use different storages and formats.\n\nnode-flat-db comes bundled with `file-sync`, `file-async` and `browser` storages, but you can also write your own if needed.\n\n### CLI\n\nFor CLIs, it's easier to use `node-flat-db/file-sync` synchronous file storage .\n\n```js\nconst flat = require('node-flat-db')\nconst storage = require('node-flat-db/file-sync')\n\nconst db = flat('db.json', { storage })\n\ndb('users').push({ name: 'typicode' })\nconst user = db('users').find({ name: 'typicode' })\n```\n\n### Server\n\nFor servers, it's better to avoid blocking requests. Use `node-flat-db/file-async` asynchronous file storage.\n\n__Important__\n\n* When you modify the database, a Promise is returned.\n* When you read from the database, the result is immediately returned.\n\n```js\nconst flat = require('node-flat-db').\nconst storage = require('node-flat-db/file-async')\n\nconst db = flat('db.json', { storage })\n\napp.get('/posts/:id', (req, res) => {\n  // Returns a post\n  const post = db('posts').find({ id: req.params.id })\n  res.send(post)\n})\n\napp.post('/posts', (req, res) => {\n  // Returns a Promise that resolves to a post\n  db('posts')\n    .push(req.body)\n    .then(post => res.send(post))\n})\n```\n\n### Browser\n\nIn the browser, `node-flat-db/browser` will add `localStorage` support.\n\n```js\nconst flat = require('node-flat-db')\nconst storage = require('node-flat-db/browser')\n\nconst db = flat('db', { storage })\n\ndb('users').push({ name: 'typicode' })\nconst user = db('users').find({ name: 'typicode' })\n```\n\n### In-memory\n\nFor the best performance, use node-flat-db in-memory storage.\n\n```js\nconst flat = require('node-flat-db')\nconst db = flat()\n\ndb('users').push({ name: 'typicode' })\nconst user = db('users').find({ name: 'typicode' })\n```\n\nPlease note that, as an alternative, you can also disable `writeOnChange` if you want to control when data is written.\n\n## Compression\n\n> compresses 1000 record db from `77kb` to `7kb`\n\nThe best way to use node-flat-db if space constraint is an issue, use lzstring adapter\n\n```js\nconst flat = require('node-flat-db')\nconst storage = require('node-flat-db/file-compress-sync')\n\nconst db = flat('db', { storage })\n\ndb('users').push({ name: 'typicode' })\nconst user = db('users').find({ name: 'typicode' })\n```\n\n## API\n\n__flat([filename, [storage, [writeOnChange = true]]])__\n\nCreates a new database instance. Here are some examples:\n\n```js\nflat()                                      // in-memory\nflat('db.json', { storage: /* */ })         // persisted\nflat('db.json', { storage: /* */ }, false)  // auto write disabled\n\n// To create read-only or write-only database,\n// set only storage.read or storage.write\nconst fileSync = require('node-flat-db/file-sync')\n\n// write-only\nflat('db.json', {\n  storage: { write: fileSync.write }\n})\n\n// read-only\nflat('db.json', {\n  storage: { read: fileSync.read }\n})\n```\n\nYou can also define custom storages and formats:\n\n```js\nconst myStorage = {\n  read: (source, deserialize) => // obj or a Promise\n  write: (dest, obj, serialize) => // undefined or a Promise\n}\n\nconst myFormat = {\n  format: {\n    deserialize: (data) => // obj\n    serialize: (obj) => // data\n  }\n}\n\nflat(source, { storage: myStorage, format: myFormat }, writeOnChange)\n```\n\n__db.___\n\nDatabase lodash instance. Use it to add your own utility functions or third-party mixins like [underscore-contrib](https://github.com/documentcloud/underscore-contrib) or [underscore-db](https://github.com/typicode/underscore-db).\n\n```js\ndb._.mixin({\n  second: function(array) {\n    return array[1]\n  }\n})\n\nconst post1 = db('posts').first()\nconst post2 = db('posts').second()\n```\n\n__db.object__\n\nUse whenever you want to access or modify the underlying database object.\n\n```js\ndb.object // { posts: [ ... ] }\n```\n\nIf you directly modify the content of the database object, you will need to manually call `write` to persist changes.\n\n```js\n// Delete an array\ndelete db.object.posts\ndb.write()\n\n// Drop database\ndb.object = {}\ndb.write()\n```\n\n__db.write([source])__\n\nPersists database using `storage.write` method. Depending on the storage, it may return a promise.\n\nNote: by default, node-flat-db automatically calls it when database changes.\n\n```js\nconst db = flat('db.json', { storage })\ndb.write()            // writes to db.json\ndb.write('copy.json') // writes to copy.json\n```\n\n__db.read([source])__\n\nReads source using `storage.read` method. Depending on the storage, it may return a promise.\n\n```js\nconst db = flat('db.json', { storage })\ndb.read()            // re-reads db.json\ndb.read('copy.json') // reads copy.json\n```\n\n## Guide\n\n### How to query\n\nWith node-flat-db, you get access to the entire [lodash API](http://lodash.com/), so there is many ways to query and manipulate data. Here are a few examples to get you started.\n\nPlease note that data is returned by reference, this means that modifications to returned objects may change the database. To avoid such behaviour, you need to use `.cloneDeep()`.\n\nAlso, the execution of chained methods is lazy, that is, execution is deferred until `.value()` is called.\n\n#### Examples\n\nSort the top five posts.\n\n```js\ndb('posts')\n  .chain()\n  .filter({published: true})\n  .sortBy('views')\n  .take(5)\n  .value()\n```\n\nRetrieve post titles.\n\n```js\ndb('posts').map('title')\n```\n\nGet the number of posts.\n\n```js\ndb('posts').size()\n```\n\nMake a deep clone of posts.\n\n```js\ndb('posts').cloneDeep()\n```\n\nUpdate a post.\n\n```js\ndb('posts')\n  .chain()\n  .find({ title: 'flat!' })\n  .assign({ title: 'hi!'})\n  .value()\n```\n\nRemove posts.\n\n```js\ndb('posts').remove({ title: 'flat!' })\n```\n\n### How to use id based resources\n\nBeing able to retrieve data using an id can be quite useful, particularly in servers. To add id-based resources support to node-flat-db, you have 2 options.\n\n[underscore-db](https://github.com/typicode/underscore-db) provides a set of helpers for creating and manipulating id-based resources.\n\n```js\nconst db = flat('db.json')\n\ndb._.mixin(require('underscore-db'))\n\nconst postId = db('posts').insert({ title: 'flat!' }).id\nconst post = db('posts').getById(postId)\n```\n\n[uuid](https://github.com/broofa/node-uuid) is more minimalist and returns a unique id that you can use when creating resources.\n\n```js\nconst uuid = require('uuid')\n\nconst postId = db('posts').push({ id: uuid(), title: 'flat!' }).id\nconst post = db('posts').find({ id: postId })\n```\n\n### How to use custom format\n\nBy default, node-flat-db storages will use `JSON` to `parse` and `stringify` database object.\n\nBut it's also possible to specify custom `format.serializer` and `format.deserializer` methods that will be passed by node-flat-db to `storage.read` and `storage.write` methods.\n\nFor example, if you want to store database in `.bson` files ([MongoDB file format](https://github.com/mongodb/js-bson)):\n\n```js\nconst flat = require('node-flat-db')\nconst storage = require('node-flat-db/file-sync')\nconst bson = require('bson')\nconst BSON = new bson.BSONPure.BSON()\n\nflat('db.bson', { storage, format: {\n  serialize: BSON.serialize,\n  deserialize: BSON.deserialize\n}})\n\n// Alternative ES2015 short syntax\nconst bson = require('bson')\nconst format = new bson.BSONPure.BSON()\nflat('db.bson', { storage, format })\n```\n\n### How to encrypt data\n\nSimply `encrypt` and `decrypt` data in `format.serialize` and `format.deserialize` methods.\n\nFor example, using [cryptr](https://github.com/MauriceButler/cryptr):\n\n```js\nconst Cryptr = require(\"./cryptr\"),\nconst cryptr = new Cryptr('my secret key')\n\nconst db = flat('db.json', {\n  format: {\n    deserialize: (str) => {\n      const decrypted = cryptr.decrypt(str)\n      const obj = JSON.parse(decrypted)\n      return obj\n    },\n    serialize: (obj) => {\n      const str = JSON.stringify(obj)\n      const encrypted = cryptr.encrypt(str)\n      return encrypted\n    }\n  }\n})\n```\n\n## Changelog\n\nSee changes for each version in the [release notes](https://github.com/typicode/node-flat-db/releases).\n\n## Limits\n\nnode-flat-db is a convenient method for storing data without setting up a database server. It is fast enough and safe to be used as an embedded database.\n\nHowever, if you seek high performance and scalability more than simplicity, you should probably stick to traditional databases like MongoDB.\n\n## Benchmarks\n\n> `npm install microtime`\n\n`npm run benchmarks`\n\n\n## License\n\nMIT - [Gabriel J. Csapo](https://github.com/gabrielcsapo)\n"
}